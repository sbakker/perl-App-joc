=head1 NAME

joc - Juniper Openconnect Client

=head1 SYNOPSIS

=over

=item Short Options:

B<joc> [B<-c> I<confdir>] [B<-e> I<VAR>B<=>I<VALUE> ...] [I<config>]

B<joc> B<-s>

B<joc> {B<-?|-h>}

=item Long Options:

B<joc> [B<--confdir>=I<confdir>]  [B<--environment> I<VAR>=I<VALUE> ...] [I<config>]

B<joc> B<--stop>

B<joc> B<--help>

=back

=head1 DESCRIPTION

Wrapper for using L<openconnect(8)> to connect to Juniper Pulse VPNs.

=head1 PREREQUISITES

=over

=item * L<openconnect(8)>

Version 7.05 or upwards. The program checks for this
and aborts if the version of C<openconnect> is too old.

=item * L<sudo(8)>

Since C<openconnect> needs root privileges, the program will reinvoke itself
with C<sudo> if it is not running as root yet.

=back

=head1 OPTIONS

=over

=item B<-c> I<confdir>

=item B<--confdir>=I<confdir>
X<-c>X<--confdir>

Directory which contains the config files (default: F<~/.config/joc/config>).

=item B<-e> I<VAR>B<=>I<VAL>

=item B<--confdir>=I<confdir>

=item B<--environment>=I<VAR>B<=>I<VAL>

X<-e>X<--environment>

Set environment variable I<VAR> to value I<VAL>, also for the bit that is
executed under L<sudo>(8).

This option is used internally by the script to carry over values for
I<XDG_CONFIG_HOME> and I<XDG_DATA_HOME>.

=item B<-s>, B<--stop>
X<-s>X<--stop>

Stop all running openconnect processes.

=item B<-h>, B<-?>, B<--help>

Print a usage summary and exit.

=back

=head1 CONFIGURATION

A configuration I<foo> is defined by a YAML file I<< <confdir>/foo.yml >>.

=head2 Variable Interpolation

Values in the YAML file can refer to other variables, by prefixing the
name of the variable with a dollar sign, optionally using braces to
distinguish the variable name from surrounding content. Example:

    ---
    user: joe
    homedir: /home/$user
    diminutive: ${user}y

Here, the C<homedir> will expand to C</home/joe> and C<diminutive>
will evaluate to C<joey>.

Interpolation happens dynamically on parameter lookup, so the above
could also have been specified as:

    ---
    homedir: /home/$user
    diminutive: ${user}y
    user: joe

=head2 Default Variables

The following variables are pre-defined and can be overridden or
referenced in the configuration file:

=over

=item C<HOME>, C<PATH>, ...

All environment variables are imported and available. Setting them in
the configuration does not change them in the environment, though.

=item C<APP_DIR>

Top-level directory for the application files. Any relative path names
specified in the configuration file are taken to be relative to this
directory.

Value: C<~/.config/joc>

=item C<CONFIG_DIR>

See L</--confdir>.

=item C<default_cafile>

List of default locations for C<cafile>, see L</FILES> below.

=item C<openconnect_command>

Command to execute for C<openconnect>. Defaults to (surprise!)
C<openconnect>, i.e. it will typically use the system default.
Can be overridden to use a different executable, e.g. a newer (self-compiled)
version in C</usr/local/bin/openconnect>.

=back

=head2 Mandatory Settings

=over

=item C<url>

The URL for the VPN service, typically something like:
C<https://vpn.corporate.domain>

=item C<cafile> I<or> C<servercert>

At least one of these must be specified; both should point to files containing
SSL certificates in PEM format.

The C<servercert> contains the SSL certificate for the VPN service, while
C<cafile> contains the certificate authority (CA) chain to verify the server
certificate.

If neither C<cafile> nor C<servercert> is set, then C<cafile> is set from the
first value in C<default_cafile> that points to an existing file.

=item C<user>

User name for the VPN service. If not set, the default is the login name of
the user executing the program.

=back

=head2 Optional Settings

=over

=item C<certfile>

File containing a client certificate (PEM format) to present to the remote
VPN service.

=item C<der_certificate>

Ignored by C<joc> (but mandatory for L<pulse_connect(1)>).

=item C<exclusion_routes>

List of destinations to be excluded from the VPN routing.
Routes can be specified as host names or IP addresses
(with an optional prefix length).

=item C<extra_input>

List of extra input lines to feed to L<openconnect(8)>. This can be
handy in case of e.g. two-factor authentication with Duo.

See also the L<Duo MFA|/Duo MFA> example below.

=item C<openconnect_args>

List of additional arguments to pass to openconnect.

=item C<password>

Password for the user. If not specified, the program will
ask for it on F<STDIN>.

=item C<protocol>

Instruct L<openconnect(8)> how to connect to the VPN service.
Should be either C<juniper> or C<nc>.  The default is autodetected,
and depends on the version of L<openconnect(8)> installed on the
system (v7.05 introduced experimental support for C<--juniper>,
v7.07 introduced C<--protocol=nc>).

=item C<realm>

Optional realm to give to the remote end. If multiple authentication
realms are supported, the Pulse gateway will prompt for it and a valid
realm must be given.

=item C<user>

Defaults to the name of the user executing C<joc>.

=back

=head1 EXAMPLE

=head2 Basic Configuration

Example config file:

    # Configuration in "~/.config/joc/config/example.yml"
    ---
    # Mandatory: URL to connect to
    url: https://vpn.example.com

    # Mandatory: authentication credentials
    user: john.doe@example.com
    password: S@m3th1ng-53cr34

    # Mandatory: CA certificate for VPN gateway.
    cafile: ssl/startcom-CA.pem

    # Optional: exclude these hosts from being routed over the VPN
    exclusion_routes:
        - jumphost.example.com
        - mailhost.example.com
        - www.example.com

    # Optional: use self-compiled, newer version.
    openconnect_command: $HOME/src/openconnect-7.07/openconnect

    # Optional: additional openconnect(8) CLI arguments.
    openconnect_args:
        - --reconnect-timeout
        - --force-dpd=30

    # For pulse client (see pulse_connect)
    der_certificate: ssl/vpn.example.com.der

Using the config:

    joc example

=head2 Duo MFA

Example config for Duo multi-factor authentication. This is basically the
same as the exampla above, except for the change in C<url> and the addition
of C<extra_input>:

    # Configuration in "~/.joc/config/duo.yml"
    ---
    # Mandatory: URL to connect to
    url: https://vpn.example.com/Duo

    # Tell the VPN Duo module to use push notifications
    extra_input: push

    # Mandatory: authentication credentials
    user: john.doe@example.com
    password: S@m3th1ng-53cr34

    # Mandatory: CA certificate for VPN gateway.
    cafile: ssl/startcom-CA.pem

    # Optional: exclude these hosts from being routed over the VPN
    exclusion_routes:
        - jumphost.example.com
        - mailhost.example.com
        - www.example.com

    # Optional: use self-compiled, newer version.
    openconnect_command: $HOME/src/openconnect-7.07/openconnect

    # Optional: additional openconnect(8) CLI arguments.
    openconnect_args:
        - --reconnect-timeout
        - --force-dpd=30

    # For pulse client (see pulse_connect)
    der_certificate: ssl/vpn.example.com.der

Using the config:

    joc duo

=head1 FILES

=over

=item F<~/.config/joc> (XDG compliant)

=item F<~/.joc> (deprecated)

Default "top-level" directory for application configuration files.
See L<APP_DIR|/APP_DIR>.

=item F<~/.config/joc/config> (XDG compliant)

=item F<~/.joc/config> (deprecated)

Location of configuration files; for instance, the configuration I<foo>
would be found in C<~/.config/joc/config/foo.conf>.

See L<CONFIG_DIR|/CONFIG_DIR> and L<--confdir|/--confdir>.

=item F<~/.local/share/joc/joc_state.yml>

=item F<~/.joc/state/joc_state.yml>

Application state file (such as active exclusion routes).

=item F</etc/ssl/certs/ca-bundle.crt>

=item F</etc/ssl/certs/ca-certificates.crt>

Default locations for the C<default_cafile>. The C<ca-bundle.crt> is
common on RedHat-based systems, while C<ca-certificates.txt> is
typically found on Debian-based distributions. The program picks
whichever one exists.

=back

=head1 SEE ALSO

L<getx509certificate(1p)>,
L<openconnect(8)>,
L<pulse_connect(1p)>.

=head1 AUTHOR

Steven Bakker C<< <sbakker@cpan.org> >>.

=head1 HISTORY

Inspired by C<jnc>, a wrapper for the Juniper network connect client
(C<ncsvc>), written by Klara Mall, C<iwr91@rz.uni-karlsruhe.de>.

=head1 COPYRIGHT AND LICENCE

Copyright 2016, Steven Bakker C<< <sbakker@cpan.org> >>.

This is free software; you can redistribute it and/or modify it under the
same terms as the Perl 5 programming language system itself.
