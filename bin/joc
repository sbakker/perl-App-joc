#!/usr/bin/perl
#
# joc: a wrapper for openconnect to connect to Juniper Pulse.
#
# See POD at end.
#

use 5.014;
use strict;
use warnings;

use FindBin;
use POSIX qw(setsid);
use URI;
use NetAddr::IP;
use Pod::Usage;
use YAML::XS qw();
use YAML::AppConfig;
use Term::ReadKey;
use List::Util qw( first );
use Getopt::Long qw( :config no_ignore_case bundling );

my $progname = $FindBin::Script;

# Start with a sane environment.
my @PATH = qw(
    /usr/local/bin /usr/local/sbin
    /usr/bin /usr/sbin
    /bin /sbin
);

$::ENV{'PATH'} = join(':', @PATH);

# Determine the "real" user name, i.e. the one that
# initiated this script. If under sudo, this will be
# the SUDO_USER, otherwise we'll try the USER or LOGNAME
# envariables, falling back to the real user-id if all
# else fails.
my $USER = $::ENV{SUDO_USER} // $::ENV{USER}
            // $::ENV{LOGNAME} // getpwuid($<);

# Get the user's _real_ HOME directory.
$::ENV{HOME} = (getpwnam($USER))[7];

my $APP_DIR         = "$ENV{'HOME'}/.joc";
my $STATEFILE       = "$APP_DIR/state/${progname}_state.yml";
my $DFL_CONFIG_DIR  = "$APP_DIR/config";
my $DFL_CONFIG_FILE = "default.yml";

my @DFL_CAFILE      = qw(
    /etc/ssl/certs/ca-bundle.crt
    /etc/ssl/certs/ca-certificates.crt
);

# need sbin for ifconfig command
$ENV{'PATH'}        = "$APP_DIR/bin:/sbin:/usr/sbin:$ENV{'PATH'}";
$ENV{'LANG'}        = "C";

Main();

#############################################################################
sub Main {
#############################################################################
    my @args = @ARGV;
    my %opts;

    my $opts = read_args(
        config_dir          => $DFL_CONFIG_DIR,
        config_file         => $DFL_CONFIG_FILE,
        openconnect_command => 'openconnect',
        stop                => 0,
    );

    # Re-execute with "sudo" if not running as root.
    if ($> != 0) {
        exec('sudo', "$FindBin::RealBin/$FindBin::RealScript", @args);
        die "$FindBin::Script: cannot exec sudo: $!\n";
    }

    my $config_path = "$$opts{config_dir}/$$opts{config_file}";

    if ($$opts{stop}) {
        ocstop();
    }
    else {
        my $config = read_config($config_path,
            %ENV,
            CONFIG_DIR          => $$opts{config_dir},
            APP_DIR             => $APP_DIR,
            default_cafile      => \@DFL_CAFILE,
            openconnect_command => $$opts{openconnect_command},
            user                => $USER,
        );
        ocstart($config);
    }
}


#############################################################################
sub occheck {
#############################################################################
    my $config = shift;

    my $cmd = $config->get('openconnect_command');
    my @proto_args;

    my $version = readpipe("$cmd --version");
    if ($? != 0) {
        die "FATAL: could not determine version of openconnect\n";
    }

    my $proto = lc ($config->get('protocol') // '');

    $version =~ s/^.* version v(\S+)\n.*$/$1/s;
    if ($version lt '7.05') {
        die "FATAL: openconnect version $version is too low.\n",
            "FATAL: need at least version 7.05 for Juniper support\n";
    }
    if ($version lt '7.07') {
        if ($proto eq 'nc') {
            print STDERR "WARNING: protocol 'nc' not supported on ",
                         "openconnect v$version.\n",
                         "WARNING: defaulting to '--juniper'\n";
        }
        $proto = 'juniper';
    }
    elsif ($proto eq '') {
        $proto = 'nc';
    }

    if ($proto ne 'nc' and $proto ne 'juniper') {
        die "FATAL: unsupported protocol '$proto'\n";
    }

    $config->set('protocol' => $proto);
    return $proto eq 'juniper' ? ('--juniper') : ('--protocol' =>  $proto);
}


#############################################################################
sub ocstart {
#############################################################################
    my $config = shift;

    # check if openconnect is already running
    if (pgrep('openconnect')) {
        die "Not starting, because openconnect is already running.\n"
            . qq{Try "$progname -s".\n};
    }

    my @proto_args = occheck($config);

    my @openconnect_args = (
        @proto_args,
        '--passwd-on-stdin',
        '--user' => $config->get('user'),
    );

    if (my $cafile = $config->get('cafile')) {
        push @openconnect_args, '--cafile' => $cafile;
    }

    if (my $args = $config->get('openconnect_args')) {
        my @args = ref $args ? @$args: ($args);
        push @openconnect_args, @args;
    }

    if (my $servercert = $config->get('servercert')) {
        my $fp = get_fingerprint($servercert);
        push @openconnect_args, '--servercert' => $fp;
    }

    if (my $certfile = $config->get('certfile')) {
        push @openconnect_args, '--certificate' => $certfile;
    }

    my @default_gateways = get_default_routes();

    my @exclusion_routes;
    if (my $ex_routes = $config->get('exclusion_routes')) {
        @exclusion_routes = ref $ex_routes ? @$ex_routes : ($ex_routes);
    }

    my $password = $config->get('password');
    my $realm = $config->get('realm');

    if (!$password && !$config->get('certfile')) {
        $password = read_password();
    }

    print "Connecting to ".$config->get('url')."\n";

    push @openconnect_args, $config->get('url');

    print "EXEC: @openconnect_args\n";

    # save network interface status before starting openconnect.
    my %inet_addr = get_inet_addr();
    my @ifs_orig = keys %inet_addr;

    pipe (my $from_parent, my $to_openconnect);

    $SIG{CHLD} = 'IGNORE';
    $SIG{PIPE} = \&exec_openconnect_failed;

    my $pid = fork;
    die "Couldn't fork: $!" unless defined $pid;

    if ($pid == 0)  {
        close $to_openconnect;
        exec_openconnect(
            $config->get('openconnect_command'),
            $from_parent, \@openconnect_args
        );
    }
    else {
        close $from_parent;
    }

    select STDOUT;   $| = 1;
    select STDERR;   $| = 1;

    if ($password) {
        sleep 1;
        print $to_openconnect $password, "\n";
    }
    if ($realm) {
        sleep 1;
        print $to_openconnect $realm, "\n";
    }
    close $to_openconnect;

    my (@ifs, $if, $if_old, $tunif);
    $|=1;
    print "Waiting for openconnect: ";

    WAITLOOP: while (1) {
        sleep 1;
        %inet_addr = get_inet_addr();
        @ifs = keys %inet_addr;

        if (($#ifs - $#ifs_orig) == 0) {
            if (pgrep('openconnect')) {
                print ".";
            }
            else {
                print "done: openconnect exited.\n";
                print "Wrong url/user/password/certfile?\n";
                print "Is openconnect binary available?\n";
                exit(1);
            }
        }
        elsif (($#ifs - $#ifs_orig) == 1) {
            foreach $if (@ifs) {
                my $found = 0;
                foreach $if_old (@ifs_orig) {
                    if ($if eq $if_old) { $found = 1; last; }
                }
                if (not $found) {
                    print "done.\n";
                    print "openconnect is running in background (PID: $pid):\n";
                    print "tunnel interface $if, addr: ",$inet_addr{$if},"\n";
                    last WAITLOOP;
                }
            }
        }
        else {
            print "done.\n";
            print "openconnect is running in background (PID: $pid):\n";
            print "but something strange happened to the number of your ",
                  "network interfaces, check manually.\n";
            last WAITLOOP;
        }
    }

    # Save state information.
    dump_statefile(
        pid => $pid,
        default_gateways => \@default_gateways,
        exclusion_routes => \@exclusion_routes,
    );

    foreach my $route (@exclusion_routes) {
        foreach my $gw (@default_gateways) {
            do_system(1, qw(route add), $route, 'gw', $gw);
        }
    }

    # Exit the parent (foreground) process, leaving the
    # openconnect in the background.
    exit(0);
}

#############################################################################
sub help {
#############################################################################
print <<HELP;
Usage: $progname [OPTIONS]... [CONFIG]
       $progname -s (stop all running openconnect clients)

$progname: a wrapper for using openconnect to connect to Juniper Pulse VPNs

-c, --confdir       directory which contains the config files
                    (default: ~/.joc/config)
-?, -h, --help      print this help message

CONFIG: setting foo as CONFIG: config file is
<confdir>/foo.yml. if CONFIG is omitted, config file
is confdir/default.yml

See also perldoc $progname
HELP
}


#############################################################################
sub read_password {
#############################################################################
    my $password;

    local( $SIG{'HUP'} ) =
    local( $SIG{'INT'} ) =
    local( $SIG{'QUIT'} ) =
    local( $SIG{'TERM'} )
        = sub { ReadMode('restore'); die "(abort)\n" };

    ReadMode('noecho');
    print "Password: ";
    chomp($password = <STDIN>);
    ReadMode('restore');
    print "\n";
    return $password;
}


#############################################################################
sub read_args {
#############################################################################
  my %opts = @_;

  GetOptions(
    'confdir|c=s'  => \$opts{config_dir},
    'stop|s'       => \$opts{stop},
    'help|h|?'     => sub { help(); exit 0; },
  ) or die qq{Try "$progname --help" for more information.\n"};

  $opts{config_dir} =~ s{/+$}{};

  if (@ARGV == 1) {
    $opts{config_file} = (shift @ARGV).".yml";
  }
  elsif (@ARGV > 1) {
    die qq{Too many arguments, see "$progname --help"\n};
  }
  return \%opts;
}


#############################################################################
sub read_config {
#############################################################################
    my ($config_file, %defaults) = @_;

    my $config = YAML::AppConfig->new( yaml_class => 'YAML::XS' );

    # Initialise config with defaults.
    while (my ($k, $v) = each %defaults) {
        $config->set($k => $v);
    }

    open my $fh, '<', $config_file or die "Cannot read $config_file: $!\n";
    close $fh;

    $config->merge(file => $config_file);

    $config->get('url') or die "No url defined in $config_file.\n";
    $config->get('user') or die "No user defined in $config_file.\n";

    if (! $config->get('cafile') && ! $config->get('servercert')) {
        if (my $dfl_ca = $config->get('default_cafile')) {
            my @dfl_ca = ref $dfl_ca ? @$dfl_ca : ($dfl_ca);
            if ($dfl_ca = first { -f $_ } @dfl_ca) {
                print STDERR "WARNING: no cafile or servercert defined ",
                             "in $config_file.\n",
                             "WARNING: Choosing default cafile '$dfl_ca'.\n";
                $config->set('cafile' => $dfl_ca);
            }
            else {
                die "FATAL: no cafile or servercert defined ",
                    "in $config_file.\n",
                    "FATAL: No suitable default available.\n";
            }
        }
        else {
            die "FATAL: no cafile or servercert defined ",
                "in $config_file.\n",
                "FATAL: No defaults defined.\n";
        }
    }

    my $app_dir = $config->get('APP_DIR');

    # Make sure unqualified paths are relative to APP_DIR.
    for my $key (qw(servercert cafile certfile)) {
        my $path = $config->get($key) or next;
        next if $path =~ m{^/};
        $config->set($key => "$app_dir/$path");
    }
    return $config;
}


#############################################################################
sub get_fingerprint {
#############################################################################
    my $certfile = shift;
    chomp(my $out = `openssl x509 -noout -in $certfile -sha1 -fingerprint`);
    $out =~ s/^.*=//g;
    return $out;
}


#############################################################################
sub get_inet_addr {
#############################################################################
  my $ifs = `ifconfig`;
  my @ifs = split (/\n\n/,$ifs);
  my ($if, $inet_addr, %inet_addr);
  foreach (@ifs) {
    s/\n//g;
    $if = $_;
    $inet_addr = $_;
    $if =~ s/^(.*?)\s.*/$1/;
    $inet_addr =~ s/.*inet addr:(.*?)\s.*/$1/;
    $inet_addr{$if} = $inet_addr;
  }
  return %inet_addr;
}


#############################################################################
sub dump_statefile {
#############################################################################
    my %args = @_;

    my $yaml_text = YAML::XS::Dump(\%args);

    if (open my $state_fh, ">", $STATEFILE) {
        print $state_fh $yaml_text;
        return close $state_fh;
    }
    else {
        print STDERR "FATAL: cannot write $STATEFILE: $!\n",
                "\nSave the following information to ",
                "$STATEFILE manually if possible:\n",
                "# STATE\n",
                $yaml_text,
                "# END\n";
        exit(1);
    }
}


#############################################################################
sub read_statefile {
#############################################################################
    my $state_ref = {};

    if (-f $STATEFILE) {
        if (open my $state_fh, "<$STATEFILE") {
            close $state_fh;
            $state_ref = YAML::XS::LoadFile($STATEFILE);
        }
        else {
            print STDERR "WARNING: cannot read $STATEFILE: $!\n";
        }
    }
    else {
        print STDERR "WARNING: cannot read $STATEFILE: $!\n";
    }

    for my $k (qw( default_gateways exclusion_routes )) {
        if (!defined $state_ref->{$k}) {
            $state_ref->{$k} = [];
        }
        elsif (!ref $state_ref->{$k}) {
            $state_ref->{$k} = [ $state_ref->{$k} ];
        }
    }
    $state_ref->{pid} //= 0;

    return $state_ref;
}


#############################################################################
sub ocstop {
#############################################################################
    my $state = read_statefile();

    my $pid = $state->{pid};
    my $routes = $state->{exclusion_routes};
    my $gateways = $state->{default_gateways};

    my @pids = pgrep('openconnect');

    if (@pids) {
        print "openconnect is running (@pids), sending signal... ";
        kill(2, @pids);
        sleep(1);
        if (pgrep('openconnect')) {
            print qq{\nCould not kill all openconnect processes, try}
                . qq{ "sudo killall -TERM openconnect".\n};
            exit(1);
        }
        print "terminated.\n";
    }
    else {
        print "No running openconnect found.\n";
    }

    foreach my $route (@$routes) {
        foreach my $gw (@$gateways) {
            do_system( 1, qw( route del ), $route, q{gw}, $gw );
        }
    }
    exit(0);
}


#############################################################################
sub exec_openconnect_failed {
#############################################################################
  die "Execution of openconnect failed.\n";
}


#############################################################################
sub do_system {
#############################################################################
    my $condition = shift;
    if ($condition) {
        print ">> @_\n";
        system(@_);
    }
    else {
        print "## @_\n";
    }
}


#############################################################################
sub get_default_routes {
#############################################################################
    my @routes;
    foreach (readpipe('netstat -rn')) {
        my @F = split(' ', $_);
        push(@routes, $F[1]) if $F[0] eq '0.0.0.0';
    }
    return @routes;
}


#############################################################################
sub pgrep {
#############################################################################
  my $command = shift;
  return map { /^\s*(\d+)/ } grep { /\s$command$/ } readpipe("ps -eo pid,comm");
}


#############################################################################
sub get_addresses {
#############################################################################
    my @hosts = @_;
    my %addr;

    for my $host (@hosts) {
        my @addr = gethostbyname($host)
                    or die "$0: cannot resolve $host: $!\n";
        for my $addr (@addr[4..$#addr]) {
            $addr{NetAddr::IP->new_from_aton($addr)} = 1;
        }
    }
    return sort { $a <=> $b } keys %addr;
}


#############################################################################
sub exec_openconnect {
#############################################################################
    my ($openconnect_command, $from_parent, $openconnect_args) = @_;
    POSIX::setsid();

    print STDERR "EXEC: ",
        join(' ', $openconnect_command, @$openconnect_args), "\n";

    chdir $APP_DIR || die "$FindBin::Script: cannot chdir to $APP_DIR $!\n";

    open(STDIN, '<&'.fileno($from_parent)) or die ("open: $!");

    select STDERR;   $| = 1;
    select STDOUT;   $| = 1;

    exec($openconnect_command, @$openconnect_args);

    die("could not exec openconnect: $!\n");
}


__END__

=head1 NAME

joc - Juniper Openconnect Client

=head1 SYNOPSIS

=over

=item Short Options:

B<joc> [B<-c> I<confdir>]  [I<config>]

B<joc> B<-s>

B<joc> {B<-?|-h>}

=item Long Options:

B<joc> [B<--confdir>=I<confdir>]  [I<config>]

B<joc> B<--stop>

B<joc> B<--help>

=back

=head1 DESCRIPTION

Wrapper for using L<openconnect(8)> to connect to Juniper Pulse VPNs.

=head1 PREREQUISITES

=over

=item * L<openconnect(8)>

Version 7.05 or upwards. The program checks for this
and aborts if the version of C<openconnect> is too old.

=item * L<sudo(8)>

Since C<openconnect> needs root privileges, the program will reinvoke itself
with C<sudo> if it is not running as root yet.

=back

=head1 OPTIONS

=over

=item B<-c> I<confdir>

=item B<--confdir>=I<confdir>
X<-c>X<--confdir>

Directory which contains the config files (default: F<~/.joc/config>).

=item B<-s>, B<--stop>
X<-s>X<--stop>

Stop all running openconnect processes.

=item B<-h>, B<-?>, B<--help>

Print a usage summary and exit.

=back

=head1 CONFIGURATION

A configuration I<foo> is defined by a YAML file I<< <confdir>/foo.yml >>.

=head2 Variable Interpolation

Values in the YAML file can refer to other variables, by prefixing the
name of the variable with a dollar sign, optionally using braces to
distinguish the variable name from surrounding content. Example:

    ---
    user: joe
    homedir: /home/$user
    diminutive: ${user}y

Here, the C<homedir> will expand to C</home/joe> and C<diminutive>
will evaluate to C<joey>.

Interpolation happens dynamically on parameter lookup, so the above
could also have been specified as:

    ---
    homedir: /home/$user
    diminutive: ${user}y
    user: joe

=head2 Default Variables

The following variables are pre-defined and can be overridden or
referenced in the configuration file:

=over

=item C<HOME>, C<PATH>, ...

All environment variables are imported and available. Setting them in
the configuration does not change them in the environment, though.

=item C<APP_DIR>

Top-level directory for the application files. Any relative path names
specified in the configuration file are taken to be relative to this
directory.

Value: C<~/.joc>

=item C<CONFIG_DIR>

See L</--confdir>.

=item C<default_cafile>

List of default locations for C<cafile>, see L</FILES> below.

=item C<openconnect_command>

Command to execute for C<openconnect>. Defaults to (surprise!)
C<openconnect>, i.e. it will typically use the system default.
Can be overridden to use a different executable, e.g. a newer (self-compiled)
version in C</usr/local/bin/openconnect>.

=back

=head2 Mandatory Settings

=over

=item C<url>

The URL for the VPN service, typically something like:
C<https://vpn.corporate.domain>

=item C<cafile> I<or> C<servercert>

At least one of these must be specified; both should point to files containing
SSL certificates in PEM format.

The C<servercert> contains the SSL certificate for the VPN service, while
C<cafile> contains the certificate authority (CA) chain to verify the server
certificate.

If neither C<cafile> nor C<servercert> is set, then C<cafile> is set from the
first value in C<default_cafile> that points to an existing file.

=item C<user>

User name for the VPN service. If not set, the default is the login name of
the user executing the program.

=back

=head2 Optional Settings

=over

=item C<certfile>

File containing a client certificate (PEM format) to present to the remote
VPN service.

=item C<der_certificate>

Ignored by C<joc> (but mandatory for L<pulse_connect(1)>).

=item C<exclusion_routes>

List of destinations to be excluded from the VPN routing.
Routes can be specified as host names or IP addresses
(with an optional prefix length).

=item C<openconnect_args>

List of additional arguments to pass to openconnect.

=item C<password>

Password for the user. If not specified, the program will
ask for it on F<STDIN>.

=item C<protocol>

Instruct L<openconnect(8)> how to connect to the VPN service.
Should be either C<juniper> or C<nc>.  The default is autodetected,
and depends on the version of L<openconnect(8)> installed on the
system (v7.05 introduced experimental support for C<--juniper>,
v7.07 introduced C<--protocol=nc>).

=item C<realm>

Optional realm to give to the remote end. If multiple authentication
realms are supported, the Pulse gateway will prompt for it and a valid
realm must be given.

=item C<user>

Defaults to the name of the user executing C<joc>.

=back

=head1 EXAMPLE

Example config file:

    # Configuration in "~/.joc/config/example.yml"
    ---
    url: https://vpn.example.com
    cafile: ssl/startcom-CA.pem
    exclusion_routes:
        - jumphost.example.com
        - mailhost.example.com
        - www.example.com

    # Use self-compiled, newer version.
    openconnect_command: $HOME/src/openconnect-7.07/openconnect

    user: john.doe@example.com
    password: S@m3th1ng-53cr34

    openconnect_args:
        - --reconnect-timeout
        - --force-dpd=30

    # For pulse client (see pulse_connect)
    der_certificate: ssl/vpn.example.com.der

Using the config:

    joc example

=head1 FILES

=over

=item F<~/.joc/config>

Location of configuration files; for instance, the configuration I<foo>
would be found in C<~/.joc/config/foo.conf>.

=item F</etc/ssl/certs/ca-bundle.crt>

=item F</etc/ssl/certs/ca-certificates.crt>

Default locations for the C<default_cafile>. The C<ca-bundle.crt> is
common on RedHat-based systems, while C<ca-certificates.txt> is
typically found on Debian-based distributions. The program picks
whichever one exists.

=back

=head1 SEE ALSO

L<getx509certificate(1p)>,
L<openconnect(8)>,
L<pulse_connect(1p)>.

=head1 AUTHOR

Steven Bakker C<< <sb AT monkey-mind DOT net> >>.

=head1 HISTORY

Inspired by C<jnc>, a wrapper for the Juniper network connect client
(C<ncsvc>), written by Klara Mall, C<iwr91@rz.uni-karlsruhe.de>.

=head1 COPYRIGHT AND LICENCE

Copyright 2016, Steven Bakker C<< <sb AT monkey-mind DOT net> >>.

This is free software; you can redistribute it and/or modify it under the
same terms as the Perl 5 programming language system itself.
